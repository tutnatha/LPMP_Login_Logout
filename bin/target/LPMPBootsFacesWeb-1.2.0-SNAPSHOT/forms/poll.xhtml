<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html>
<ui:composition template="/applayout/pageTemplate.xhtml"
    xmlns="http://www.w3.org/1999/xhtml"
    xmlns:h="http://java.sun.com/jsf/html"
    xmlns:f="http://java.sun.com/jsf/core"
    xmlns:b="http://bootsfaces.net/ui"
    xmlns:ui="http://java.sun.com/jsf/facelets">

    <ui:define name="content">
        <style>
td {
    padding: 8px;
}
</style>
        <h1>Poll (&lt;b:poll &gt;)</h1>

        <p>
            <code>&lt;b:poll /&gt;</code>
            refreshes a part of the screen periodically. It can also call an <code>action</code> or an <code>actionListener</code>.
        </p>
        
        <h2>Basic usage</h2>
        <b:panel look="info" title="Demo">
            <b:panelGrid colSpans="6,6">
            <h:form>
                <b:poll interval="3000"
                        update="worldTimeId" 
                        actionListener="#{pollDemoBean.listener}"/>
                <h:outputText id="worldTimeId"
                              value="Current time: #{pollDemoBean.currentTime}" />
            </h:form>
            <div>
            <script type="syntaxhighlighter"
                class="brush: xml; toolbar: false;gutter: false; first-line: 1">
<![CDATA[
<h:form>
    <b:poll interval="3000" 
            update="worldTimeId" 
            actionListener="&num;{pollDemoBean.listener}"/>
    <h:outputText id="worldTimeId"
                  value="Current time: &num;{pollDemoBean.currentTime}" />
</h:form>
]]>
       </script>
       </div>
            </b:panelGrid>
        </b:panel>
        
        <h2>AJAX <b:badge value="breaking change in 1.1.2"/></h2>
        <p>Prior to BootsFaces 1.1.2, the attributes <code>update</code> and <code>execute</code> where simply passed to the HTML code.
        Since 1.1.2, they are evaluated by the advanced search expression engine of BootsFaces, as they should. However, this may
        break programs relying on the bug (such as this showcase).</p> 
        
        <h2>JavaScript API <b:badge value="since 1.1.2" /></h2>
        <p>You can access the JavaScript API by setting the <code>widgetVar</code> attribute. This attribute is the name of the JavaScript
        object implementing <code>&lt;b:poll /&gt;</code> on the client side. Currently, the public API consists of a stop and (re)start function:</p>
        <ul>
        <li><code>widgetVar.stop()</code> allows you to stop polling from JavaScript.</li> 
        <li><code>widgetVar.start()</code> allows you to (re)start polling from JavaScript.</li> 
        </ul>
        
        
        <b:panel look="info" title="Demo">
            <b:panelGrid colSpans="6,6">
            <h:form>
                <b:poll interval="3000"
                        widgetVar="pollVar"
                        stop="#{pollDemoBean.stop}"
                        update="worldTimeId" 
                        execute="worldTimeId" 
                        actionListener="#{pollDemoBean.listener}"/>
                <b:panelGrid colSpans="4,6,2" id="worldTimeId">
                    <h:outputText value="Current time:" />
                    <h:outputText value="#{pollDemoBean.currentTime}" />
                    <h:outputText value="Counter:" />
                    <h:inputText value="#{pollDemoBean.counter}" />
                    <h:outputText value="" />
                </b:panelGrid>
                <b:commandButton action="#{pollDemoBean.setStop(true)}"
                                 process="@this"
                                 update="@form"
                                 value="Ajax stop"
                                 disabled="#{pollDemoBean.stop}"/>
                <b:commandButton action="#{pollDemoBean.setStop(false)}"
                                 process="@this"
                                 update="@form"
                                 value="Ajax start"
                                 disabled="#{not pollDemoBean.stop}"/>
                <b:button onclick="pollVar.stop()"
                          value="JS stop"
                          disabled="#{pollDemoBean.stop}"/>
                <b:button onclick="pollVar.start()"
                          value="JS start"
                          disabled="#{pollDemoBean.stop}"/>
            </h:form>
            <div>
            <script type="syntaxhighlighter"
                class="brush: xml; toolbar: false;gutter: false; first-line: 1">
<![CDATA[
<h:form>
    <b:poll interval="3000"
            widgetVar="pollVar"
            stop="&num;{pollDemoBean.stop}"
            update="worldTimeId" 
            execute="worldTimeId" 
            actionListener="&num;{pollDemoBean.listener}"/>
    <b:panelGrid colSpans="4,6,2" id="worldTimeId">
        <h:outputText value="Current time:" />
        <h:outputText value="&num;{pollDemoBean.currentTime}" />
        <h:outputText value="Counter:" />
        <h:inputText value="&num;{pollDemoBean.counter}" />
        <h:outputText value="" />
    </b:panelGrid>
    <b:commandButton action="&num;{pollDemoBean.setStop(true)}"
                     process="@this"
                     update="@form"
                     value="Ajax stop"
                     disabled="&num;{pollDemoBean.stop}"/>
    <b:commandButton action="&num;{pollDemoBean.setStop(false)}"
                     process="@this"
                     update="@form"
                     value="Ajax start"
                     disabled="&num;{not pollDemoBean.stop}"/>
    <b:button onclick="pollVar.stop()"
              value="JS stop"
              disabled="&num;{pollDemoBean.stop}"/>
    <b:button onclick="pollVar.start()"
              value="JS start"
              disabled="&num;{pollDemoBean.stop}"/>
</h:form>
]]>
       </script>
       </div>
            </b:panelGrid>
        </b:panel>
        
        
        <b:panel look="info">
            <f:facet name="heading">
                <b>Attributes of &lt;b:poll &gt;</b>
            </f:facet>
                <table class="table table-striped table-hover"
                    style="background-color: #fff">
                    <thead>
                        <tr>
                            <th>Attribute</th>
                            <th>Default value</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            <td>action</td>
                            <td>none</td>
                            <td>Calls a JSF bean method and initiates a navigation.</td>
                        </tr>
                        <tr>
                            <td>actionListener</td>
                            <td>none</td>
                            <td>Calls an action listener in the JSF bean.</td>
                        </tr>
                        <tr>
                            <td>execute</td>
                            <td>@none</td>
                            <td>Which input fields are to be sent?</td>
                        </tr>
                        <tr>
                            <td>interval</td>
                            <td>1000</td>
                            <td>How often is the poll action to be called? Denotes the number of milliseconds between polls.</td>
                        </tr>
                        <tr>
                            <td>update</td>
                            <td>@form</td>
                            <td>Which region of the screen is to be updated?</td>
                        </tr>
                        <tr>
                            <td>stop</td>
                            <td>false</td>
                            <td>If true, the poll will stop.</td>
                        </tr>
                        <tr>
                            <td>widgetVar</td>
                            <td>none</td>
                            <td>Optional widget variable to access the datatable widget in JavaScript code.</td>
                        </tr>
                    </tbody>
                </table>
        </b:panel>

        <script type="text/javascript">
      SyntaxHighlighter.all();
    </script>
        <br />
        <br />
        <br />
        <br />
    </ui:define>
</ui:composition>
