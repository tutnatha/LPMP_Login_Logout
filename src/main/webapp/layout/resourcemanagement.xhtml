<?xml version='1.0' encoding='UTF-8' ?>
  <!DOCTYPE html>
  <ui:composition template="/applayout/pageTemplate.xhtml" xmlns="http://www.w3.org/1999/xhtml"
        xmlns:h="http://java.sun.com/jsf/html"
        xmlns:f="http://java.sun.com/jsf/core"
        xmlns:b="http://bootsfaces.net/ui"
        xmlns:ui="http://java.sun.com/jsf/facelets">
   
     <ui:define name="content">
        <h1>Dealing with resource files <b:badge value="improved in 0.8.0" /></h1>
        <p>The BootsFaces jar contains many CSS and JavaScript files. You don't need external resource files to use BootsFaces. However,
        many developers and web designers aren't happy with that. These are basically the reasons for using external resources:
        </p>
        <ul>
        <li>Many resource files BootsFaces uses are also provided by CDNs. Using a CDN reduces your server's load, and in many cases CDNs
        serve the files faster.</li>
        <li>Often developers want to use their own versions of our JS or CSS libraries.</li>
        <li>Sometimes another framework already add its own instance of jQuery (or anather library we need).</li>
        <li>BootsFaces doesn't serve the entires jQueryUI library. Instead, it tries to optimize the network traffic by serving the 
        jQueryUI modules individually. That's a good choice with respect to http/2, but currently this approach slows things down.</li>
        <li>In rare cases, developers want to modify the resource files BootsFaces provides.</li>
        </ul>
        <p>To serve all these requirements, we've implemented quite a few options to influence which files are loaded and which are not.</p>  
        
        <h3>jQuery and jQueryUI</h3>
        <p>In general, BootsFaces goes into some lengths to decide which libraries to load, and when. Among other things, BootsFaces modifies the order of JavaScript
        libraries if need be:</p>
        <ul>
        <li>jQuery.js is always loaded first.</li>
        <li>jQueryUI.js is always loaded second.</li>
        <li>bsf.js is always loaded last.</li>
        </ul>
        <p>If you provide your own version of jQuery (i.e. if there's a <code>&lt;h:outputScript library="(whatever)" name="(whatever)/jQuery-(whatever).js" /&gt;</code>),
        BootsFaces doesn't add its own jQuery. Its up to you to make sure your jQuery is compatible to BootsFaces. Our mechanism to detect whether you
        add jQuery or not is fairly flexible. It checks whether the resource name contains the substring "jquery" and ends with ".js". Plus, it's case-agnostic.</p>
        <p>The some applies to jQueryUI. In this case, we check for the sub-string "jquery-ui".</p>
       
        
        <h3>Font Awesome</h3>
        <p>If you provide your own version of FontAwesome, BootsFaces doesn't load its own version of FontAwesome. We're looking for resource files containing the
        sub-string "font-awesome" or "fontawesome" and ending with ".css". Again, we ignore the case.</p>
        <p>You can suppress Font Awesome on a per-page basis by adding the facet "no-fa" to the <code>&lt;h:head /&gt;</code> of your XHTML file.</p>
        
        <h3>Configuring resources via the <code>web.xml</code></h3>
        <p>Alternatively, you can configure your <code>web.xml</code> to suppress certain resources:</p>
        <ul>
        <li>Setting the context parameter <code>net.bootsfaces.get_fontawesome_from_cdn</code> to "yes" or "true" allows you to provide your own Font Awesome file.</li>
        <li>Setting the context parameter <code>net.bootsfaces.get_jquery_from_cdn</code> to "yes" or "true" allows you to provide your own jQuery file.</li>
        <li>Setting the context parameter <code>net.bootsfaces.get_jqueryui_from_cdn</code> to "yes" or "true" allows you to provide your own jQueryUI file.</li>
        <li>Setting the context parameter <code>net.bootsfaces.get_bootstrap_from_cdn</code> to "yes" or "true" allows you to provide your own Bootstrap CSS file.
        Note that this option is a bit difficult to get up and running. BootsFaces modifies the original Bootstrap files. That's only a handful of lines of code,
        but be warned. Currently, we're aware of changes in these files:
        <ul>
        <li>https://github.com/TheCoder4eu/BootsFaces-OSP/blob/master/gradleResources/less/bs-navbar.less</li>
        <li>https://github.com/TheCoder4eu/BootsFaces-OSP/blob/master/gradleResources/less/bs-thumbnails.less</li>
        <li>https://github.com/TheCoder4eu/BootsFaces-OSP/blob/master/gradleResources/jq/ui/datepicker.js</li>
        </ul>
        </li>
        </ul>
        
        
        <h3>Defining when your resource files are loaded</h3>
        <p>If you need to place your CSS or JS file before or after the other resource files, you can use the attribute <code>position</code> of the
        <code>&lt;h:outputStylesheet /&gt;</code>. This is a non-standard attribute, so chances are your IDE complains about it. If so, make it a pass-through attribute.
        </p>
        <script type="syntaxhighlighter" class="brush: xml; toolbar: false;first-line: 0">
        <![CDATA[
        <h:outputStylesheet name="first.css" position="first"/>
        <h:outputStylesheet name="middle.css" position="middle"/>
        <h:outputStylesheet name="last.css" position="last"/>
        ]]></script>
        
        
        
        
        <br/><br/><br/>
        <script type="text/javascript">
            SyntaxHighlighter.all();
        </script>
    </ui:define>
</ui:composition>
